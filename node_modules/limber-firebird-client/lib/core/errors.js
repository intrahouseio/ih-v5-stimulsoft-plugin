module.exports = {GDSError: GDSError};

function GDSError(gdsObject) {
    this.message = gdsObject && gdsObject.message || '';
    const cond = ['ð', '§', 'Ã¡', 'Ã©', 'Ã­', 'Ã³', 'Ãº', 'Ã', 'Ã', 'Ã', 'Ã', 'Ã', 'Ã¢', 'Ãª', 'Ã®', 'Ã´', 'Ã»', 'Ã', 'Ã', 'Ã', 'Ã', 'Ã', 'Ã', 'Ã§', 'Ã£', 'Ãµ', 'Ã', 'Ã'];
    if (cond.some(el => this.message.includes(el))) {
        this.message = new Buffer(this.message, 'latin1').toString('utf8')
    }

    const firstStatus = gdsObject && gdsObject.status && gdsObject.status.length > 0 && gdsObject.status[0] || {};
    this.code = firstStatus.gdscode || -1;
    this.gdserrors = gdsObject.status;

    if (Error.captureStackTrace) {
        Error.captureStackTrace(this, GDSError);
    } else {
        this.stack = (new Error()).stack;
    }
}

GDSError.prototype = Object.create(Error.prototype);
GDSError.prototype.name = 'GDSError';